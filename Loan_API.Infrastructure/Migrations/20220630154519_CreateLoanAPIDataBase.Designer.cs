// <auto-generated />
using System;
using Loan_API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Loan_API.Infrastructure.Migrations
{
    [DbContext(typeof(LoanDbContext))]
    [Migration("20220630154519_CreateLoanAPIDataBase")]
    partial class CreateLoanAPIDataBase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Loan_API.Domain.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CurrencyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrencyName = "GEL"
                        },
                        new
                        {
                            Id = 2,
                            CurrencyName = "USD"
                        },
                        new
                        {
                            Id = 3,
                            CurrencyName = "EUR"
                        });
                });

            modelBuilder.Entity("Loan_API.Domain.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoanPeriodTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoanStatusId")
                        .HasColumnType("int");

                    b.Property<int>("LoanTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LoanStatusId");

                    b.HasIndex("LoanTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Loans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 2000.0,
                            CurrencyId = 1,
                            LoanPeriodTime = new DateTime(2023, 12, 31, 5, 10, 20, 0, DateTimeKind.Unspecified),
                            LoanStatusId = 1,
                            LoanTypeId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Amount = 3000.0,
                            CurrencyId = 2,
                            LoanPeriodTime = new DateTime(2023, 12, 31, 5, 10, 20, 0, DateTimeKind.Unspecified),
                            LoanStatusId = 2,
                            LoanTypeId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Amount = 4000.0,
                            CurrencyId = 3,
                            LoanPeriodTime = new DateTime(2023, 12, 31, 5, 10, 20, 0, DateTimeKind.Unspecified),
                            LoanStatusId = 3,
                            LoanTypeId = 3,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Loan_API.Domain.LoanStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("LoanStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LoanStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LoanStatusName = "In process"
                        },
                        new
                        {
                            Id = 2,
                            LoanStatusName = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            LoanStatusName = "Rejected"
                        });
                });

            modelBuilder.Entity("Loan_API.Domain.LoanType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("LoanTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LoanTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LoanTypeName = "Quick loan"
                        },
                        new
                        {
                            Id = 2,
                            LoanTypeName = "Auto loan"
                        },
                        new
                        {
                            Id = 3,
                            LoanTypeName = "Installment"
                        });
                });

            modelBuilder.Entity("Loan_API.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Accountant"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("Loan_API.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 20,
                            FirstName = "Thomas",
                            IsBlocked = false,
                            LastName = "Hardy",
                            Password = "$2a$11$MHcnoX7AIQACV.gFMpgsUOxYfEXuvvROoDZFm3SopnXvtjbI2fqka",
                            RoleId = 1,
                            Salary = 1000.0,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            Age = 25,
                            FirstName = "Christina",
                            IsBlocked = true,
                            LastName = "Berglund",
                            Password = "$2a$11$cNDX06Wdi0FgtlI1JROfB.q8zlybBbKytLmeTisvUDveTRfKdxTxW",
                            RoleId = 2,
                            Salary = 1000.0,
                            UserName = "user2@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            Age = 30,
                            FirstName = "Ana",
                            IsBlocked = false,
                            LastName = "Trujillo",
                            Password = "$2a$11$UXknr4GH9Wrq7Z6NZTXSA.CeVfbUybopeRHwftjcS6S9D8PXMR06C",
                            RoleId = 2,
                            Salary = 1000.0,
                            UserName = "user3@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            Age = 35,
                            FirstName = "Maria",
                            IsBlocked = false,
                            LastName = "Anders",
                            Password = "$2a$11$J4ULLMQ0RiRYIMtdtGq6WOe2wqT10pZKIdg26A8uBlg1dAmbd7S1y",
                            RoleId = 2,
                            Salary = 1000.0,
                            UserName = "user4@gmail.com"
                        });
                });

            modelBuilder.Entity("Loan_API.Domain.Loan", b =>
                {
                    b.HasOne("Loan_API.Domain.Currency", null)
                        .WithMany("Loans")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Loan_API.Domain.LoanStatus", null)
                        .WithMany("Loans")
                        .HasForeignKey("LoanStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Loan_API.Domain.LoanType", null)
                        .WithMany("Loans")
                        .HasForeignKey("LoanTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Loan_API.Domain.User", null)
                        .WithMany("Loans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Loan_API.Domain.User", b =>
                {
                    b.HasOne("Loan_API.Domain.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Loan_API.Domain.Currency", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Loan_API.Domain.LoanStatus", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Loan_API.Domain.LoanType", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Loan_API.Domain.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Loan_API.Domain.User", b =>
                {
                    b.Navigation("Loans");
                });
#pragma warning restore 612, 618
        }
    }
}
